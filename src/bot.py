from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ConversationHandler, CallbackContext, CallbackQueryHandler
import logging
import os

# Estados de la conversaci√≥n
SALUDO, DATOS, MENU, PEDIDO, CONFIRMACION = range(5)

# Configura logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# Simulaci√≥n de base de datos de usuarios (en memoria)
usuarios = {}

# Mensajes y botones
MENU_PDF_URL = "https://onepizzeria.com/menu.pdf"  # Cambia por el real si lo tienes

# --- Handlers ---
async def start(update: Update, context: CallbackContext) -> int:
    user_id = update.effective_user.id
    if user_id in usuarios:
        nombre = usuarios[user_id]['nombre'].split()[0]
        await update.message.reply_text(f"¬°Hola {nombre}, bienvenido de vuelta a ONE PIZZERIA ‚ò∫üçï‚ú®!")
        # Simula direcci√≥n guardada
        await update.message.reply_text(
            "Tenemos guardada la direcci√≥n Calle 123a #45b-67 Torre 8 Apto 901, ¬ødeseas ordenar a esta misma o una direcci√≥n distinta? Si es as√≠, dime a cu√°l.",
            reply_markup=ReplyKeyboardMarkup([
                [KeyboardButton("Usar direcci√≥n guardada")],
                [KeyboardButton("Ingresar nueva direcci√≥n")]
            ], one_time_keyboard=True, resize_keyboard=True)
        )
        return MENU
    else:
        await update.message.reply_text(
            "¬°Hola y bienvenido a ONE PIZZERIA ‚ò∫üçï‚ú®!\nPara comenzar, por favor comp√°rtenos tu nombre completo, direcci√≥n de entrega, tu tel√©fono y tu correo. As√≠ podremos agilizar tu orden hoy y en futuras compras."
        )
        return DATOS

async def recibir_datos(update: Update, context: CallbackContext) -> int:
    user_id = update.effective_user.id
    datos = update.message.text
    usuarios[user_id] = {'nombre': datos.split()[0] if datos else 'Cliente', 'datos': datos}
    await update.message.reply_text(f"¬°Genial {usuarios[user_id]['nombre']} ‚ò∫üçï‚ú®!")
    await update.message.reply_text(
        "Antes de que elijas tus pizzas, aqu√≠ tienes algunos detalles importantes:\n" +
        "Elige tus pizzas, combos, postres o bebidas. Indica sabor, tama√±o, tipo de masa, borde y queso (si quieres los tradicionales, no hace falta mencionarlo).\n" +
        "Dinos tu m√©todo de pago. Recibe tu pedido y disfruta la mejor pizza del mundo mundial.\n¬°Adem√°s, te enviamos nuestro men√∫ en PDF con todos los productos! Tambi√©n tenemos descuentos disponibles hoy. √âchales un vistazo en el PDF o preg√∫ntanos por ellos. Si necesitas saber m√°s sobre ingredientes, adiciones o nuestras sucursales (Bogot√° Chic√≥, Bogot√° Cedritos y Ch√≠a San Roque), ¬°pregunta con confianza!",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("Ver men√∫ PDF", url=MENU_PDF_URL)]
        ])
    )
    await update.message.reply_text("¬øQu√© te gustar√≠a pedir hoy? Escr√≠belo o usa el bot√≥n de abajo.",
        reply_markup=ReplyKeyboardMarkup([
            [KeyboardButton("Ver men√∫ PDF")],
            [KeyboardButton("Hacer pedido")]
        ], one_time_keyboard=True, resize_keyboard=True)
    )
    return PEDIDO

async def menu_handler(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text(
        "Aqu√≠ tienes el men√∫ en PDF:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("Ver men√∫ PDF", url=MENU_PDF_URL)]
        ])
    )
    await update.message.reply_text("¬øQu√© te gustar√≠a pedir hoy? Puedes escribirlo o usar el bot√≥n de abajo.",
        reply_markup=ReplyKeyboardMarkup([
            [KeyboardButton("Hacer pedido")]
        ], one_time_keyboard=True, resize_keyboard=True)
    )
    return PEDIDO

async def recibir_pedido(update: Update, context: CallbackContext) -> int:
    pedido = update.message.text
    context.user_data['pedido'] = pedido
    await update.message.reply_text(
        f"¬°Perfecto! Este es tu pedido provisional:\n{pedido}\n¬øTe gustar√≠a agregar o modificar alg√∫n producto de tu pedido?",
        reply_markup=ReplyKeyboardMarkup([
            [KeyboardButton("Agregar producto")],
            [KeyboardButton("No, est√° perfecto")] 
        ], one_time_keyboard=True, resize_keyboard=True)
    )
    return CONFIRMACION

async def confirmacion(update: Update, context: CallbackContext) -> int:
    respuesta = update.message.text
    if "agregar" in respuesta.lower():
        await update.message.reply_text("Por favor, dime qu√© producto deseas agregar.")
        return PEDIDO
    else:
        await update.message.reply_text("¬°Genial! Ahora, ¬øc√≥mo deseas pagar? Elige una opci√≥n:",
            reply_markup=ReplyKeyboardMarkup([
                [KeyboardButton("Efectivo")],
                [KeyboardButton("Dat√°fono (tarjeta)")]
            ], one_time_keyboard=True, resize_keyboard=True)
        )
        await update.message.reply_text("¬°Gracias por tu pedido! Pronto te contactaremos para confirmar la entrega. Si tienes dudas, ¬°escr√≠benos! üòäüçï")
        return ConversationHandler.END

async def cancelar(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text("Conversaci√≥n cancelada. ¬°Esperamos verte pronto en ONE PIZZERIA! üçï")
    return ConversationHandler.END

# --- Main ---
def main():
    TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    if not TOKEN:
        print("Por favor, define la variable de entorno TELEGRAM_BOT_TOKEN.")
        return
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SALUDO: [MessageHandler(filters.TEXT & ~filters.COMMAND, start)],
            DATOS: [MessageHandler(filters.TEXT & ~filters.COMMAND, recibir_datos)],
            MENU: [MessageHandler(filters.Regex(".*(men√∫|menu|ver men√∫|ver menu|direcci√≥n|direccion|Usar direcci√≥n guardada|Ingresar nueva direcci√≥n).*"), menu_handler)],
            PEDIDO: [MessageHandler(filters.TEXT & ~filters.COMMAND, recibir_pedido)],
            CONFIRMACION: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirmacion)],
        },
        fallbacks=[CommandHandler('cancel', cancelar)]
    )
    app.add_handler(conv_handler)
    print("Bot iniciado. Esperando mensajes...")
    app.run_polling()

if __name__ == "__main__":
    main()
